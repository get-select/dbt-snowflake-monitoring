[tox]
skipsdist = True
envlist = integration_snowflake

[sqlfluff]
exclude_rules = LT05, ST06, RF04, AM06, ST05, LT02
dialect = snowflake
templater = dbt
deps =
    sqlfluff-templater-dbt~=2.0.0
    dbt-snowflake~=1.3.0

[testenv]
passenv =
    DBT_PROFILES_DIR
    GITHUB_SHA
    GITHUB_SHA_OVERRIDE
    DBT_ENV_SECRET_SNOWFLAKE_TEST_ACCOUNT
    DBT_ENV_SECRET_SNOWFLAKE_TEST_USER
    DBT_ENV_SECRET_SNOWFLAKE_TEST_PASSWORD
    DBT_ENV_SECRET_SNOWFLAKE_TEST_ROLE
    DBT_ENV_SECRET_SNOWFLAKE_TEST_DATABASE
    DBT_ENV_SECRET_SNOWFLAKE_TEST_WAREHOUSE

[testenv:lint]
deps = {[sqlfluff]deps}
commands = sqlfluff lint {posargs} --ignore parsing

[testenv:lint_all]
deps = {[sqlfluff]deps}
commands =
    dbt deps
    sqlfluff lint models --ignore parsing

[testenv:fix]
deps = {[sqlfluff]deps}
commands = sqlfluff fix {posargs} --ignore parsing -f

[testenv:fix_all]
deps = {[sqlfluff]deps}
commands = sqlfluff fix models --ignore parsing -f

[testenv:generate_docs]
deps = dbt-snowflake~=1.3.0
commands = dbt docs generate

[testenv:integration_snowflake]
; This test env uses a test dataset and asserted expected output
changedir = integration_test_project
setenv =
    SOURCE_DATABASE_OVERRIDE = DBT_CI
    SOURCE_SCHEMA_OVERRIDE = MOCK_DATA
deps = dbt-snowflake~=1.3.0
commands =
    dbt deps
    dbt build -s +daily_spend --full-refresh
    dbt build --exclude dbt_snowflake_monitoring --full-refresh
    dbt build -s +daily_spend
    dbt build --exclude dbt_snowflake_monitoring

[testenv:snowflake]
; This test env just runs the package as it would normally be installed, using the snowflake database as a source
changedir = integration_test_project
deps = dbt-snowflake~=1.3.0
commands =
    dbt deps
    dbt build -s dbt_snowflake_monitoring --full-refresh
    dbt build -s dbt_snowflake_monitoring
